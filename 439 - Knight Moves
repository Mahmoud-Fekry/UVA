#include <bits/stdc++.h>

#define sz(s) (int)s.size()
#define all(s) s.begin(),s.end()
#define mem(a,b) memset(a,b,sizeof(a))

typedef long long ll;
typedef unsigned long long ull;

using namespace std;

void fl() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
}

typedef pair<int, int> pii;
typedef set<string> ss;
typedef set<int> si;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<pii> vii;
typedef map<int, int> mii;
typedef map<string, int> msi;
typedef map<int, ss> miss;
typedef map<char, int> mci;
typedef map<int, vi> mivi;
mivi mp;

int po(char c) {
	return c - '0' - 49;
}

int pos(int x, int y) {
	return (x * 8) + y + 1;
}
void con() {
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			vii v;
			int p = pos(i, j), pp;
			v.push_back(make_pair(i + 2, j + 1));
			v.push_back(make_pair(i + 2, j + 1));
			v.push_back(make_pair(i - 2, j + 1));
			v.push_back(make_pair(i - 2, j - 1));
			v.push_back(make_pair(i + 1, j + 2));
			v.push_back(make_pair(i + 1, j - 2));
			v.push_back(make_pair(i - 1, j + 2));
			v.push_back(make_pair(i - 1, j - 2));
			for (int k = 0; k < sz(v); k++) {
				int fir = v[k].first, sec = v[k].second;
				if (fir < 0 || fir > 7 || sec < 0 || sec > 7)
					continue;
				pp = pos(fir, sec);
				mp[p].push_back(pp);
				mp[pp].push_back(p);
			}
		}
	}
}

int bfs(int a, int b) {
	queue<int> q;
	mii m;
	m[a] = 0;
	q.push(a);
	while (!q.empty()) {
		int f = q.front();
		q.pop();
		for (int i = 0; i < sz(mp[f]); i++) {
			int t = mp[f][i];
			q.push(t);
			m[t] = m[f] + 1;
			if (t == b) {
				t = m[t];
				m.clear();
				return t;
			}

		}
	}
	return -1;

}

int main() {
	fl();
	con();
	string s1, s2;
	int a, b, x1, x2, y1, y2;
	while (cin >> s1 >> s2) {
		cout << "To get from " << s1 << " to " << s2 << " takes ";
		if (s1 == s2) {
			cout << 0 << " knight moves." << endl;
			continue;
		}
		y1 = po(s1[0]);
		y2 = po(s2[0]);
		x1 = s1[1] - '0';
		x2 = s2[1] - '0';
		x1--;
		x2--;
		a = pos(x1, y1), b = pos(x2, y2);
		cout << bfs(a, b) << " knight moves." << endl;
	}

	return 0;
}

